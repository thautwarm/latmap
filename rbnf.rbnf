%parametric s, ss, partial_ok

%parametric s, ss, partial_ok
%%inline
from theme import Theme
Keyword = Theme.Keyword
Var = Theme.Var
Literal = Theme.Literal
Pattern = Theme.Pattern
String = Theme.String
Call = Theme.Call
Type = Theme.Type

def append(x, a):
    x.append(a)
    return x

%%


list[pat] := pat           { [$1] }
          |  list[pat] pat { append($1, $2) }
          ;

sep_list[sep, pat] := pat              { [$1] }
              |  sep_list[sep, pat] sep pat { append($1, $3) }
              ;


comma := ',' { s($1, String) } ;

expr_lst := sep_list[comma, expr] { () };

Ident := <Ident> { s($1, Var) };

atom := <QuotedStr>          { s($1, Literal) }
     | '<' Ident '>'        { ss($1, Type, $3, Type) }
     | Ident                { () }
     | '(' expr ')'            { ss($1, Keyword, $3, Keyword) }
     | <Ident> '[' expr_lst ']'  { ss($1, Pattern, $2, Keyword, $4, Keyword) }
     | <Ident> '=' atomExpr      { ss($1, Call, $2, Keyword) }
     ;


atomExpr := atom               { () }
         | atom '?'           { s($2, Call) }
         ;
        
seq := list[atomExpr] { () };
cseq := seq { () };

xor := '|' { s($1, String) };
expr := sep_list[xor, cseq] { () };


rewrite := seq               { () }
        |  seq '{' lang '}'  { ss($2, String, $4, String) }
        ;

alts := sep_list[xor, rewrite] { () };


IdentList := sep_list[comma, Ident] { () };

prod := <Ident> ':=' alts ';'                      
        { ss($1, Var, $2, Keyword) }
     | <Ident> '[' IdentList ']' ':=' alts ';'      
        { ss($1, Pattern, $2, Call, $4, Call, $5, Keyword) }
     | <Ident> '[' ']' ':=' alts ';'               { s($1, Pattern) }
     
     | Ident '<=>' expr ';'                       { () }
     | Ident '[' IdentList ']' '<=>' expr ';'     { () }
     | Ident '[' ']' '<=>' expr ';'               { () }
     ;

lang_lst := sep_list[',', lang] { () };

lang := lang_atom                     { () }
     | lang '(' lang_lst ')'         { ss($2, Call, $4, Call) }
     | lang '(' ')'                  { ss($2, Call, $3, Call) }
     ;

lang_atom :=
       Ident                 { () }
     | <Int>                 { s($1, Literal) }
     | '(' ')'               { ss($1, Type, $2, Type) }
     | '[' ']'               { ss($1, Type, $2, Type) }
     | '(' lang_lst ')'      { ss($1, Type, $3, Type) }
     | '(' lang_lst ',' ')'  { ss($1, Type, $3, String, $4, Type) }
     | '[' lang_lst ']'      { ss($1, Type, $3, Type) }
     | '$' <Int>             { s($1, Call) }
     ;

filename := <QuotedStr> { s($1, String) }
         ;

pragma := '%include' Ident sep_list[',', filename] { s($1, Keyword) }
       | '%include' sep_list[',', filename] { s($1, Keyword) }
       | '%parametric' sep_list[',', Ident] { s($1, Keyword) }
       | <Code> { () }
       | <Ident> <Code> { () }
       ;

START := <BOF> pragma <EOF> { partial_ok() }
      | <BOF> prod <EOF>  { partial_ok() }
      | <BOF> <EOF> { () }
      ;

